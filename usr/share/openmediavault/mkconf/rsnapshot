#!/bin/sh
#
# This file is part of OpenMediaVault.
#
# @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author    Julian Kalinowski <julakali@gmail.com>
# @copyright Copyright (c) 2013 Julian Kalinowski
#
# OpenMediaVault is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# OpenMediaVault is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with OpenMediaVault. If not, see <http://www.gnu.org/licenses/>.

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

# already set during postinst
#OMV_RSNAPSHOT_CONFS_DIR=${OMV_RSNAPSHOT_CONFS_DIR:-"/var/lib/openmediavault/rsnapshot.d"}
#OMV_RSNAPSHOT_CRONSCRIPT=${OMV_RSNAPSHOT_CRONSCRIPT:-"/var/lib/openmediavault/cron.d/rsnapshot"}

OMV_RSNAPSHOT_SCRIPTS_MASK=${OMV_RSNAPSHOT_SCRIPTS_MASK:-"755"}
OMV_RSNAPSHOT_LOGFILE=${OMV_RSNAPSHOT_LOGFILE:-"/var/log/rsnapshot.log"}

# macros for xmlstarlet
GET_SOURCEFOLDER_PATH=${GET_SOURCEFOLDER_PATH=-m "//system/shares/sharedfolder[uuid=current()/sourcefolderref]" -v "concat(//system/fstab/mntent[uuid=current()/mntentref]/dir,'/',reldirpath)" -b}
GET_TARGETFOLDER_PATH=${GET_TARGETFOLDER_PATH=-m "//system/shares/sharedfolder[uuid=current()/targetfolderref]" -v "concat(//system/fstab/mntent[uuid=current()/mntentref]/dir,'/',reldirpath)" -b}
GET_SOURCE_RELDIR=${GET_SOURCE_RELDIR=-m "//system/shares/sharedfolder[uuid=current()/sourcefolderref]" -v "reldirpath" -b}
#

# Create the backup jobs. Every job gets its own config file, but their execution
# is managed through one single bash script that is executed by cron.

# create the configuration directory
mkdir -p ${OMV_RSNAPSHOT_CONFS_DIR}
# delete all previous configurations, as they're all created from scratch
rm -f ${OMV_RSNAPSHOT_CONFS_DIR}/rsnapshot-*

# Create a new rsnapshot script containing argument check
echo "if [ -z \"\$1\" ]; then echo No argument given; exit 1; fi" > ${OMV_RSNAPSHOT_CRONSCRIPT}.tmp

# void omv_get_mount_point (char *uuid)
# Get the mount point of the given shared folder
# @param The UUID of the shared folder
# @return The mount point, e.g /media/85732966-949a-4d8b-87d7-d7e6681f787e.
omv_get_mount_point() {
        xmlstarlet sel -t -m "//system/shares/sharedfolder[uuid='$1']" \
          -v "//system/fstab/mntent[uuid=current()/mntentref]/dir" \
          ${OMV_CONFIG_FILE} | xmlstarlet unesc
}

# Create the config files regardless if enabled or disabled.
xmlstarlet sel -t -m "//services/rsnapshot/jobs/job" \
  -v "uuid" \
  -i "position() != last()" -n -b \
  ${OMV_CONFIG_FILE} | xmlstarlet unesc |
  while read uuid; do
	  filename="${OMV_RSNAPSHOT_CONFS_DIR}/rsnapshot-${uuid}.conf"

	  sourcefolderref=$(omv_config_get "//services/rsnapshot/jobs/job[uuid='${uuid}']/sourcefolderref")
	  #targetfolderref=$(omv_config_get "//services/rsnapshot/jobs/job[uuid='${uuid}']/targetfolderref")
	  #sourcepath="$(omv_get_sharedfolder_path "${sourcefolderref}")/"
	  #targetpath="$(omv_get_sharedfolder_path "${targetfolderref}")/"
	  
	  # determine the mountpoint of the source shared folder
	  mountpoint="$(omv_get_mount_point "${sourcefolderref}")"
	  sourcedevice="$(cat /etc/mtab | grep ${mountpoint} | cut -d " " -f 1)"
	  
	  if [ -e "${mountpoint}" ] && [ -b "${sourcedevice}" ] && [ -n "$(e2label ${sourcedevice})" ]; then
		# if mountpoint exists, sourcedevice is block and filesystem has a label, use it as backup subdir name
		sourcelabel=$(e2label ${sourcedevice});
	  else
		# else, use the fs mountpoint
		sourcelabel=${mountpoint#/};
	  fi

	  xmlstarlet sel -t -m "//services/rsnapshot/jobs/job[uuid='${uuid}']" \
		-o "# rsnapshot-${uuid}.conf" -n \
		-o "# This configuration file is auto-generated." -n \
		-o "# WARNING: Do not edit this file, your changes will be lost." -n \
		-o "# user: " -v "gid" -n \
		-o "config_version	1.2" -n \
		-o "snapshot_root	" ${GET_TARGETFOLDER_PATH} -o "/" -n \
		-o "#no_create_root	1" -n \
		-i "hourly != 0" -o "interval	hourly	" -v "hourly" -n -b \
		-i "daily != 0" -o "interval	daily	" -v "daily" -n -b \
		-i "weekly != 0" -o "interval	weekly	" -v "weekly" -n -b \
		-i "monthly != 0" -o "interval	monthly	" -v "monthly" -n -b \
		-o "verbose		2" -n \
		-o "loglevel	3" -n \
		-o "cmd_rm		/bin/rm" -n \
		-o "cmd_rsync	/usr/bin/rsync" -n \
		-o "cmd_logger	/usr/bin/logger" -n \
		-o "logfile		${OMV_RSNAPSHOT_LOGFILE}" -n \
		-o "rsync_long_args	" \
		-i "string-length(rsyncargs) > 0" -v "rsyncargs" -n -b \
		-i "string-length(rsyncargs) = 0" -o "--delete --numeric-ids --delete-excluded" -n -b \
		-o "one_fs	" -v "onefs" -n \
		-o "backup	" ${GET_SOURCEFOLDER_PATH} -o "	localhost/" -o "${sourcelabel}/" ${GET_SOURCE_RELDIR} -o "/" -n \
		-o "rsync_numtries	" -v "numtries" -n \
		${OMV_CONFIG_FILE} | xmlstarlet unesc > ${filename}
	  chmod ${OMV_RSNAPSHOT_SCRIPTS_MASK} ${filename}

	  # append to rsnapshot script
      xmlstarlet sel -t -m "//services/rsnapshot/jobs/job[uuid='${uuid}']" \
	    -i "enable = 0" -o "#### DISABLED ####" -n -b \
		-o "# backup " ${GET_SOURCEFOLDER_PATH} -o " to " ${GET_TARGETFOLDER_PATH} -o " : " -n \
		-i "enable = 0" -o "# " -b \
		-o "if [ \"\$2\" = \"${uuid}\" ] || [ -z \"\$2\" ]; then" -n \
		-i "enable = 0" -o "# " -b \
		-o "	echo \"starting \$1 backup for ${uuid}\";" -n \
		-i "enable = 0" -o "# " -b \
		-o "	/usr/bin/rsnapshot -c ${filename} \$1;" -n \
		-i "enable = 0" -o "# " -b \
		-o "fi" -n \
		-i "enable = 0" -o "#### DISABLED #### " -b \
		${OMV_CONFIG_FILE} | xmlstarlet unesc >> ${OMV_RSNAPSHOT_CRONSCRIPT}.tmp

  done

echo "\n echo \"Backups finished.\"" >> ${OMV_RSNAPSHOT_CRONSCRIPT}.tmp

# replace previous cronscript by newly created
mv ${OMV_RSNAPSHOT_CRONSCRIPT}.tmp ${OMV_RSNAPSHOT_CRONSCRIPT}
# make cronscript executable
chmod ${OMV_RSNAPSHOT_SCRIPTS_MASK} ${OMV_RSNAPSHOT_CRONSCRIPT}

