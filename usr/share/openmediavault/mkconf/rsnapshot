#!/bin/sh
#
# This file is part of OpenMediaVault.
#
# @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author    Volker Theile <volker.theile@openmediavault.org>
# @copyright Copyright (c) 2009-2013 Volker Theile
#
# OpenMediaVault is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# OpenMediaVault is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with OpenMediaVault. If not, see <http://www.gnu.org/licenses/>.

# Documentation/Howto:
# http://linux.die.net/man/7/udev
# http://wiki.ubuntuusers.de/udev
# https://wiki.archlinux.org/index.php/Udev#Mount_under_.2Fmedia.3B_use_partition_label_if_present
# http://www.reactivated.net/writing_udev_rules.html#strsubst
# http://webapp5.rrz.uni-hamburg.de/SuSe-Dokumentation/manual/sles-admin_de/manual/sec.udev.rules.html
#
# udevadm info -a -p $(udevadm info -q path -n /dev/sdX)
# udevadm info -a --name=/dev/sdX
# udevadm control --reload-rules
# udevadm test /sys/block/sdX
# udevadm monitor --environment

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

# TODO: is this already set during postinst?
OMV_RSNAPSHOT_CONFS_DIR=${OMV_RSNAPSHOT_CONFS_DIR:-"/var/lib/openmediavault/rsnapshot.d"}
OMV_RSNAPSHOT_CRONSCRIPT=${OMV_RSNAPSHOT_CRONSCRIPT:-"/var/lib/openmediavault/cron.d/rsnapshot"}

OMV_RSNAPSHOT_SCRIPTS_MASK=${OMV_RSNAPSHOT_SCRIPTS_MASK:-"755"}
OMV_RSNAPSHOT_LOGFILE=${OMV_RSNAPSHOT_LOGFILE:-"/var/log/rsnapshot.log"}

#OMV_RSNAPSHOT_CRONSCRIPT=${OMV_RSYNC_CRONSCRIPT:-"/etc/cron.d/openmediavault-rsnapshot"}
#OMV_RSNAPSHOT_CRONSCRIPT_MASK=${OMV_RSYNC_CRONSCRIPT_MASK:-"755"}
#OMV_RSNAPSHOT_CRONSCRIPT_TEMPLATE=${OMV_RSYNC_CRONSCRIPT_TEMPLATE:-"rsnapshot-"}


#OMV_RSNAPSHOT_CRONUSER=${OMV_RSYNC_CRONUSER:-"root"}

#OMV_CRONTAB_RSNAPSHOT_CONFIG=${OMV_CRONTAB_RSNAPSHOT_CONFIG:-"/etc/cron.d/openmediavault-rsnapshot"}


GET_SOURCEFOLDER_PATH=${GET_SOURCEFOLDER_PATH=-m "//system/shares/sharedfolder[uuid=current()/sourcefolderref]" -v "concat(//system/fstab/mntent[uuid=current()/mnten
tref]/dir,'/',reldirpath)" -b}

GET_TARGETFOLDER_PATH=${GET_TARGETFOLDER_PATH=-m "//system/shares/sharedfolder[uuid=current()/targetfolderref]" -v "concat(//system/fstab/mntent[uuid=current()/mnten
tref]/dir,'/',reldirpath)" -b}

# Create the backup jobs. Each job is configured in a seperate script.
mkdir -p ${OMV_RSNAPSHOT_CONFS_DIR}
rm -f ${OMV_RSNAPSHOT_CONFS_DIR}/rsnapshot-*
#rm -f ${OMV_RSNAPSHOT_CONFS_DIR}/sync-*

# delete the temp cron script if existent
echo "if [ -z \"\$1\" ]; then echo No argument given; exit 1; fi" > ${OMV_RSNAPSHOT_CRONSCRIPT}.tmp

# Create the scripts regardless if enabled or disabled.
xmlstarlet sel -t -m "//services/rsnapshot/jobs/job" \
  -v "uuid" \
  -i "position() != last()" -n -b \
  ${OMV_CONFIG_FILE} | xmlstarlet unesc |
  while read uuid; do
	  filename="${OMV_RSNAPSHOT_CONFS_DIR}/rsnapshot-${uuid}.conf"

	  sourcefolderref=$(omv_config_get "//services/rsnapshot/jobs/job[uuid='${uuid}']/sourcefolderref")
	  targetfolderref=$(omv_config_get "//services/rsnapshot/jobs/job[uuid='${uuid}']/targetfolderref")
	  sourcepath="$(omv_get_sharedfolder_path "${sourcefolderref}")/"
	  targetpath="$(omv_get_sharedfolder_path "${targetfolderref}")/"

	  #runfile="/var/run/rsync-${uuid}"
	  xmlstarlet sel -t -m "//services/rsnapshot/jobs/job[uuid='${uuid}']" \
		-o "# rsnapshot-${uuid}.conf" -n \
		-o "# This configuration file is auto-generated." -n \
		-o "# WARNING: Do not edit this file, your changes will be lost." -n \
		-o "config_version	1.2" -n \
		-o "snapshot_root	${targetpath}" -n \
		-o "#no_create_root	1" -n \
		-i "hourly != 0" -o "interval	hourly	" -v "hourly" -n -b \
		-i "daily != 0" -o "interval	daily	" -v "daily" -n -b \
		-i "weekly != 0" -o "interval	weekly	" -v "weekly" -n -b \
		-i "monthly != 0" -o "interval	monthly	" -v "monthly" -n -b \
		-o "verbose		2" -n \
		-o "loglevel	3" -n \
		-o "cmd_rm		/bin/rm" -n \
		-o "cmd_rsync	/usr/bin/rsync" -n \
		-o "cmd_logger	/usr/bin/logger" -n \
		-o "logfile		${OMV_RSNAPSHOT_LOGFILE}" -n \
		-o "rsync_long_args	--delete --numeric-ids --relative --delete-excluded " -v "rsyncargs" -n \
		-o "one_fs	" -v "onefs" -n \
		-o "backup	${sourcepath}	localhost/" -n \
		-o "rsync_numtries	" -v "numtries" -n \
		${OMV_CONFIG_FILE} | xmlstarlet unesc > ${filename}
	  chmod ${OMV_RSNAPSHOT_SCRIPTS_MASK} ${filename}

	  # generate rsnapshot cron config
      xmlstarlet sel -t -m "//services/rsnapshot/jobs/job[uuid='${uuid}']" \
	    -i "enable = 0" -o "#### DISABLED ####" -n -b \
		-o "# backup ${sourcepath} to ${targetpath} : " -n \
		-i "enable = 0" -o "# " -b \
		-o "if [ \"\$2\" = \"${uuid}\" ] || [ -z \"\$2\" ]; then" -n \
		-i "enable = 0" -o "# " -b \
		-o "	echo \"starting \$1 backup for ${uuid}\";" -n \
		-i "enable = 0" -o "# " -b \
		-o "	/usr/bin/rsnapshot -c ${filename} \$1;" -n \
		-i "enable = 0" -o "# " -b \
		-o "fi" -n \
		-i "enable = 0" -o "#### DISABLED #### " -b \
		${OMV_CONFIG_FILE} | xmlstarlet unesc >> ${OMV_RSNAPSHOT_CRONSCRIPT}.tmp

  done

echo "\n echo \"Backups finished.\"" >> ${OMV_RSNAPSHOT_CRONSCRIPT}.tmp
mv ${OMV_RSNAPSHOT_CRONSCRIPT}.tmp ${OMV_RSNAPSHOT_CRONSCRIPT}
chmod ${OMV_RSNAPSHOT_SCRIPTS_MASK} ${OMV_RSNAPSHOT_CRONSCRIPT}

